
# This is a sample api mustache template.  It is representing a fictitious
# language and won't be usable or compile to anything without lots of changes.
# Use it as an example.  You can access the variables in the generator object
# like such:

# use the package from the `apiPackage` variable
package: api

# operations block
classname: ContainerApi

# loop over each operation in the API:

# each operation has an `operationId`:
operationId: containerArchive

# and parameters:
id: openapi::string_t
path: openapi::string_t


# each operation has an `operationId`:
operationId: containerArchiveInfo

# and parameters:
id: openapi::string_t
path: openapi::string_t


# each operation has an `operationId`:
operationId: containerAttach

# and parameters:
id: openapi::string_t
detachKeys: openapi::string_t
logs: bool
stream: bool
stdin: bool
stdout: bool
stderr: bool


# each operation has an `operationId`:
operationId: containerAttachWebsocket

# and parameters:
id: openapi::string_t
detachKeys: openapi::string_t
logs: bool
stream: bool
stdin: bool
stdout: bool
stderr: bool


# each operation has an `operationId`:
operationId: containerChanges

# and parameters:
id: openapi::string_t


# each operation has an `operationId`:
operationId: containerCreate

# and parameters:
body: UNKNOWN_BASE_TYPE
name: openapi::string_t


# each operation has an `operationId`:
operationId: containerDelete

# and parameters:
id: openapi::string_t
v: bool
force: bool
link: bool


# each operation has an `operationId`:
operationId: containerExport

# and parameters:
id: openapi::string_t


# each operation has an `operationId`:
operationId: containerInspect

# and parameters:
id: openapi::string_t
size: bool


# each operation has an `operationId`:
operationId: containerKill

# and parameters:
id: openapi::string_t
signal: openapi::string_t


# each operation has an `operationId`:
operationId: containerList

# and parameters:
all: bool
limit: int
size: bool
filters: openapi::string_t


# each operation has an `operationId`:
operationId: containerLogs

# and parameters:
id: openapi::string_t
follow: bool
stdout: bool
stderr: bool
since: int
until: int
timestamps: bool
tail: openapi::string_t


# each operation has an `operationId`:
operationId: containerPause

# and parameters:
id: openapi::string_t


# each operation has an `operationId`:
operationId: containerPrune

# and parameters:
filters: openapi::string_t


# each operation has an `operationId`:
operationId: containerRename

# and parameters:
id: openapi::string_t
name: openapi::string_t


# each operation has an `operationId`:
operationId: containerResize

# and parameters:
id: openapi::string_t
h: int
w: int


# each operation has an `operationId`:
operationId: containerRestart

# and parameters:
id: openapi::string_t
t: int


# each operation has an `operationId`:
operationId: containerStart

# and parameters:
id: openapi::string_t
detachKeys: openapi::string_t


# each operation has an `operationId`:
operationId: containerStats

# and parameters:
id: openapi::string_t
stream: bool
oneShot: bool


# each operation has an `operationId`:
operationId: containerStop

# and parameters:
id: openapi::string_t
t: int


# each operation has an `operationId`:
operationId: containerTop

# and parameters:
id: openapi::string_t
psArgs: openapi::string_t


# each operation has an `operationId`:
operationId: containerUnpause

# and parameters:
id: openapi::string_t


# each operation has an `operationId`:
operationId: containerUpdate

# and parameters:
id: openapi::string_t
update: UNKNOWN_BASE_TYPE


# each operation has an `operationId`:
operationId: containerWait

# and parameters:
id: openapi::string_t
condition: openapi::string_t


# each operation has an `operationId`:
operationId: putContainerArchive

# and parameters:
id: openapi::string_t
path: openapi::string_t
inputStream: openapi::string_t
noOverwriteDirNonDir: openapi::string_t
copyUIDGID: openapi::string_t


# end of operations block
