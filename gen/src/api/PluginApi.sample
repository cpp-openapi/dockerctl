
# This is a sample api mustache template.  It is representing a fictitious
# language and won't be usable or compile to anything without lots of changes.
# Use it as an example.  You can access the variables in the generator object
# like such:

# use the package from the `apiPackage` variable
package: api

# operations block
classname: PluginApi

# loop over each operation in the API:

# each operation has an `operationId`:
operationId: getPluginPrivileges

# and parameters:
remote: openapi::string_t


# each operation has an `operationId`:
operationId: pluginCreate

# and parameters:
name: openapi::string_t
tarContext: openapi::string_t


# each operation has an `operationId`:
operationId: pluginDelete

# and parameters:
name: openapi::string_t
force: bool


# each operation has an `operationId`:
operationId: pluginDisable

# and parameters:
name: openapi::string_t


# each operation has an `operationId`:
operationId: pluginEnable

# and parameters:
name: openapi::string_t
timeout: int


# each operation has an `operationId`:
operationId: pluginInspect

# and parameters:
name: openapi::string_t


# each operation has an `operationId`:
operationId: pluginList

# and parameters:
filters: openapi::string_t


# each operation has an `operationId`:
operationId: pluginPull

# and parameters:
remote: openapi::string_t
name: openapi::string_t
xRegistryAuth: openapi::string_t
body: std::vector


# each operation has an `operationId`:
operationId: pluginPush

# and parameters:
name: openapi::string_t


# each operation has an `operationId`:
operationId: pluginSet

# and parameters:
name: openapi::string_t
body: std::vector


# each operation has an `operationId`:
operationId: pluginUpgrade

# and parameters:
name: openapi::string_t
remote: openapi::string_t
xRegistryAuth: openapi::string_t
body: std::vector


# end of operations block
