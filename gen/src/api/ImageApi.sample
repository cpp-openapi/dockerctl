
# This is a sample api mustache template.  It is representing a fictitious
# language and won't be usable or compile to anything without lots of changes.
# Use it as an example.  You can access the variables in the generator object
# like such:

# use the package from the `apiPackage` variable
package: api

# operations block
classname: ImageApi

# loop over each operation in the API:

# each operation has an `operationId`:
operationId: buildPrune

# and parameters:
keepStorage: int
all: bool
filters: openapi::string_t


# each operation has an `operationId`:
operationId: imageBuild

# and parameters:
dockerfile: openapi::string_t
t: openapi::string_t
extrahosts: openapi::string_t
remote: openapi::string_t
q: bool
nocache: bool
cachefrom: openapi::string_t
pull: openapi::string_t
rm: bool
forcerm: bool
memory: int
memswap: int
cpushares: int
cpusetcpus: openapi::string_t
cpuperiod: int
cpuquota: int
buildargs: openapi::string_t
shmsize: int
squash: bool
labels: openapi::string_t
networkmode: openapi::string_t
contentType: openapi::string_t
xRegistryConfig: openapi::string_t
platform: openapi::string_t
target: openapi::string_t
outputs: openapi::string_t
inputStream: openapi::string_t


# each operation has an `operationId`:
operationId: imageCommit

# and parameters:
container: openapi::string_t
repo: openapi::string_t
tag: openapi::string_t
comment: openapi::string_t
author: openapi::string_t
pause: bool
changes: openapi::string_t
containerConfig: ContainerConfig


# each operation has an `operationId`:
operationId: imageCreate

# and parameters:
fromImage: openapi::string_t
fromSrc: openapi::string_t
repo: openapi::string_t
tag: openapi::string_t
message: openapi::string_t
xRegistryAuth: openapi::string_t
changes: std::vector
platform: openapi::string_t
inputImage: openapi::string_t


# each operation has an `operationId`:
operationId: imageDelete

# and parameters:
name: openapi::string_t
force: bool
noprune: bool


# each operation has an `operationId`:
operationId: imageGet

# and parameters:
name: openapi::string_t


# each operation has an `operationId`:
operationId: imageGetAll

# and parameters:
names: std::vector


# each operation has an `operationId`:
operationId: imageHistory

# and parameters:
name: openapi::string_t


# each operation has an `operationId`:
operationId: imageInspect

# and parameters:
name: openapi::string_t


# each operation has an `operationId`:
operationId: imageList

# and parameters:
all: bool
filters: openapi::string_t
sharedSize: bool
digests: bool


# each operation has an `operationId`:
operationId: imageLoad

# and parameters:
quiet: bool
imagesTarball: openapi::string_t


# each operation has an `operationId`:
operationId: imagePrune

# and parameters:
filters: openapi::string_t


# each operation has an `operationId`:
operationId: imagePush

# and parameters:
name: openapi::string_t
xRegistryAuth: openapi::string_t
tag: openapi::string_t


# each operation has an `operationId`:
operationId: imageSearch

# and parameters:
term: openapi::string_t
limit: int
filters: openapi::string_t


# each operation has an `operationId`:
operationId: imageTag

# and parameters:
name: openapi::string_t
repo: openapi::string_t
tag: openapi::string_t


# end of operations block
